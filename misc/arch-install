## sources https://wiki.archlinux.org/title/User:M0p/LUKS_Root_on_Btrfs
## https://gitlab.com/eflinux/arch-basic
## https://www.youtube.com/watch?v=maIu1d2lAiI
## https://www.youtube.com/watch?v=co5V2YmFVEE

fdisk /dev/sda
g     # create a gpt table
n     # create a new partition
+2G   # 2gB
t     # partition type
1     # EFI file partition
n     # one more partition
w     # write

cryptsetup luksFormat /dev/sda2
cryptsetup luksOpen /dev/sda2 cryptroot
mkfs.btrfs /dev/mapper/cryptroot
mkfs.fat -F 32 /dev/sda1
mount /dev/mapper/cryptroot /mnt
btrfs subvolume create /mnt/@
btrfs subvolume create /mnt/@home
btrfs subvolume create /mnt/@snapshots
umount /mnt

mount -o noatime,compress=zstd,space_cache=v2,discard=async,subvol=@256 /dev/mapper/cryptroot /mnt
mkdir /mnt/home
mkdir /mnt/boot
mkdir /mnt/.snapshots
mount -o noatime,compress=zstd,space_cache=v2,discard=async,subvol=@257 /dev/mapper/cryptroot /mnt/home
mount -o noatime,compress=zstd,space_cache=v2,discard=async,subvol=@258 /dev/mapper/cryptroot /mnt/.snapshots
mount /dev/sda1 /mnt/boot

pacstrap -K /mnt base linux linux-headers linux-firmware vim git sudo networkmanager vi grub grub-btrfs btrfs-progs openssh base-devel amd-ucode dosfstools efibootmgr
genfstab -U /mnt >> /mnt/etc/fstab
arch-chroot /mnt
ln -sf /usr/share/zoneinfo/Asia/Kolkata /etc/localtime
hwclock --systohc
echo "arch" >> /etc/hostname
echo "127.0.0.1 localhost" >> /etc/hosts
echo "::1       localhost" >> /etc/hosts
echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
echo "LANG=en_US.UTF-8" >> /etc/locale.conf
locale-gen
passwd # change root password
useradd -m dev
passwd dev
sudo mkdir /etc/pacman.d/hooks/
visudo  # inside the file add this line  "dev ALL=(ALL) ALL" below "root ALL=(ALL) ALL"
systemctl enable NetworkManager

# virtualbox
pacman -S virtualbox-guest-utils
systemctl enable vboxservice.service

vim /etc/mkinitcpio.conf
MODULES=(btrfs vboxguest vboxsf vboxvideo) # only include vbox mods incase running on a vbox
MODULES=(btrfs nvidia nvidia_modeset nvidia_uvm nvidia_drm) # only include nvidia mods incase you want wayland
BINARIES=(/usr/bin/btrfs)
HOOKS=(base udev autodetect modconf block encrypt filesystems keyboard fsck grub-btrfs-overlayfs)
mkinitcpio -P

blikd
vim  /etc/default/grub { in the grub default line (cryptdevice=UUID=dsfsdfsdf:cryptroot root=/dev/mapper/cryptroot nvidia-drm.modeset=1) }
#grub-install --target=x86_64-efi --efi-directory=/efi --boot-directory=/boot --bootloader-id=GRUB
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
grub-mkconfig -o /boot/grub/grub.cfg
exit
reboot

#gnome
sudo pacman -S xorg gdm gnome gnome-extra gnome-tweaks
sudo systemctl enable gdm

#nvidia drivers
pacman -S nvidia nvidia-utils nvidia-settings

#xfce4
sudo pacman -S --noconfirm xorg lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings xfce4 xfce4-goodies
sudo systemctl enable lightdm

# kvm
pacman -S qemu-full virt-manager virt-viewer dnsmasq vde2 bridge-utils openbsd-netcat dmidecode ebtables iptables libguestfs vagrant

vim /etc/libvirt/libvirtd.conf
#uncomment below lines
-------------------------------
unix_sock_group = "libvirt"
unix_sock_rw_perms = "0770"
-------------------------------

systemctl enable libvirtd
systemctl start libvirtd
#newgrp libvirt
usermod -aG libvirt dev
vagrant plugin install vagrant-libvirt

#packages
pacman -S firefox snapper snap-pac ntfs-3g virtualbox virtualbox-guest-iso virtualbox-guest-utils virtualbox-host-modules-arch syncthing flatpak openresolv
pacman -S rclone doas nano wget libreoffice-fresh obs-studio ufw vlc vlc-plugin-ffmpeg wireshark-qt transmission-gtk chromium rsync nextcloud-client python-nautilus rust go
pacman -S bat btop cowsay eza fd figlet fish glow lolcat neofetch neovim starship stow zsh fzf screen
pacman -S docker docker-compose podman distrobox

# font issue for other language
pacman -S noto-fonts noto-fonts-cjk noto-fonts-emoji

# flathub apps
spotify flatseal

# vscode settings (make sure dotfiles make file has installed necessary fonts)
go settings or preferences and under "Font Family" input "FiraCode Nerd Font"

# snapper setup
umount /.snapshots/
rmdir /.snapshots/
snapper --no-dbus -c root create-config /
rmdir /.snapshots/
mkdir /.snapshots/
mount /.snapshots/
snapper --no-dbus -c home create-config /home/

# configure snapper root
sudo vim /etc/snapper/configs/root

TIMELINE_MIN_AGE="1800"
TIMELINE_LIMIT_HOURLY="5"
TIMELINE_LIMIT_DAILY="7"
TIMELINE_LIMIT_WEEKLY="0"
TIMELINE_LIMIT_MONTHLY="0"
TIMELINE_LIMIT_YEARLY="0"

# configure snapper home
sudo vim /etc/snapper/configs/home

TIMELINE_MIN_AGE="1800"
TIMELINE_LIMIT_HOURLY="5"
TIMELINE_LIMIT_DAILY="7"
TIMELINE_LIMIT_WEEKLY="0"
TIMELINE_LIMIT_MONTHLY="0"
TIMELINE_LIMIT_YEARLY="0"

# Snapshots and /boot partition

sudo vim /etc/pacman.d/hooks/01-bootbackup_pre.hook

[Trigger]
Operation = Upgrade
Operation = Install
Operation = Remove
Type = Path
Target = usr/lib/modules/*/vmlinuz

[Action]
Depends = rsync
Description = Backing up pre /boot...
When = PreTransaction
Exec = /usr/bin/bash -c 'rsync -a --mkpath --delete /boot/ "/.bootbackup/$(date +%Y_%m_%d_%H.%M.%S)_pre"/'

sudo vim /etc/pacman.d/hooks/95-bootbackup_post.hook

[Trigger]
Operation = Upgrade
Operation = Install
Operation = Remove
Type = Path
Target = usr/lib/modules/*/vmlinuz

[Action]
Depends = rsync
Description = Backing up post /boot...
When = PostTransaction
Exec = /usr/bin/bash -c 'rsync -a --mkpath --delete /boot/ "/.bootbackup/$(date +%Y_%m_%d_%H.%M.%S)_post"/'


# operations
snapper -c root create -d "init snap"
snapper -c root delete 1-22
snapper -c root list
snapper --ambit classic rollback 3
systemctl enable --now snapper-timeline.timer
systemctl enable --now snapper-cleanup.timer

# home rollback
snapper -c home undochange 1..2  # undo changes whatever happened after 1 till 2
snapper -c home undochange 2..1  # redo whatever was undone by above command

# configure mkinitcpio invoke when linux kernel update

sudo vim /etc/pacman.d/hooks/nvidia.hook

[Trigger]
Operation=Install
Operation=Upgrade
Operation=Remove
Type=Package
Target=nvidia
Target=linux


[Action]
Description=Update NVIDIA module in initcpio
Depends=mkinitcpio
When=PostTransaction
NeedsTargets
Exec=/bin/sh -c 'while read -r trg; do case $trg in linux*) exit 0; esac; done; /usr/bin/mkinitcpio -P'


# configure mkinitcpio invoke when linux-lts kernel update

sudo vim /etc/pacman.d/hooks/nvidia-lts.hook

[Trigger]
Operation=Install
Operation=Upgrade
Operation=Remove
Type=Package
Target=nvidia-lts
Target=linux-lts


[Action]
Description=Update NVIDIA module in initcpio
Depends=mkinitcpio
When=PostTransaction
NeedsTargets
Exec=/bin/sh -c 'while read -r trg; do case $trg in linux*) exit 0; esac; done; /usr/bin/mkinitcpio -P'


# vs code extensions
python
code runner
Gruvbox Theme
